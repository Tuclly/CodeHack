## React Router

React Router中的组件主要分为三类：

1. 路由器，例如 BrowserRouter 和 HashRouter
2. 路由匹配器： 例如Route和Switch
3. 导航：例如Link, NavLink, and Redirect

### 基本的路由

<Link> 算是引路

<Route>算是引路的终点

```tsx
<Link to="/">Home</Link>

<Link to ="/about">About</Link>

<Link to="/users">Users</Link>

<Switch>
    <Route path="/about"> <About/> </Route>
    <Route path="/users"> <Users/> </Route>
    <Route path="/"> <Home/> </Route>
</Switch>
```

### Hooks

#### `useHistory`

useHistory hook 使您可以访问可用于导航的历史记录实例。

```js
import { useHistory } from "react-router-dom";

function HomeButton() {
  let history = useHistory();

  function handleClick() {
    history.push("/home");
  }

  return (
    <button type="button" onClick={handleClick}>
      Go home
    </button>
  );
}

```

#### `useLocation`



#### `useParams`

useParams返回URL参数的键/值对的对象。使用它来访问当前`<Route>`的match.params。

```jsx
function BlogPost() {
  let { slug } = useParams();
  return <div>Now showing post {slug}</div>;
}

ReactDOM.render(
  <Router>
    <Switch>
      <Route exact path="/">
        <HomePage />
      </Route>
      <Route path="/blog/:slug">
        <BlogPost />
      </Route>
    </Switch>
  </Router>,
  node
);
```

#### `useRouteMatch`

## JSON.parse()

```js
JSON.parse('{}');              // {}
JSON.parse('true');            // true
JSON.parse('"foo"');           // "foo"
JSON.parse('[1, 5, "false"]'); // [1, 5, "false"]
JSON.parse('null');            // null

JSON.parse('{"p": 5}', function (k, v) {
    if(k === '') return v;     // 如果到了最顶层，则直接返回属性值，
    return v * 2;              // 否则将属性值变为原来的 2 倍。
});                            // { p: 10 }

JSON.parse('{"1": 1, "2": 2,"3": {"4": 4, "5": {"6": 6}}}', function (k, v) {
    console.log(k); // 输出当前的属性名，从而得知遍历顺序是从内向外的，
                    // 最后一个属性名会是个空字符串。
    return v;       // 返回原始属性值，相当于没有传递 reviver 参数。
});
// 总之就是 碰到每一个key-value 从里到外扒一遍再继续下一个 1/2/4/6 5 /3
// 1
// 2
// 4
// 6
// 5
// 3
// ""

不能用逗号作结尾
// both will throw a SyntaxError
JSON.parse("[1, 2, 3, 4, ]");
JSON.parse('{"foo" : 1, }');
```

## JSON.stringify()

`**JSON.stringify()**` 方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性。

```js
console.log(JSON.stringify({ x: 5, y: 6 }));
// expected output: "{"x":5,"y":6}"
```

- 布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。
- `undefined`、任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 `null`（出现在数组中时）。函数、undefined 被单独转换时，会返回 undefined说，如`JSON.stringify(function(){})` or `JSON.stringify(undefined)`.
- Date 日期调用了 toJSON() 将其转换为了 string 字符串（同Date.toISOString()），因此会被当做字符串处理。
- NaN 和 Infinity 格式的数值及 null 都会被当做 null。
- 其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。

## 扩展运算符的深浅拷贝

```js
let a = {
  brandType: "lidarrrrr",
  count: "1",
  key: 1,
  match: "Lidar",
  name: "lidar1",
  operation: "删除",
  type: "车顶架",
  version: "v1.1",
  more: {
    a: {
      c: 1111,
    },
    b: 2,
  },
};

let b = {
  brandType: "lidarrrrr",
  count: "1",
  match: "组合导航",
  name: "lidar1",
  version: "v1.1",
  more: {
    a: 111111,
    b: 2222222222,
  },
};

let c = { ...a, ...b }; // 这里谁在后面，就是谁覆盖，谁在前面就是被覆盖
console.log(c);
/*
brandType: "lidarrrrr"
count: "1"
key: 1
match: "组合导航"
more: {a: 111111, b: 2222222222}
name: "lidar1"
operation: "删除"
type: "车顶架"
version: "v1.1"
__proto__: Object
*/
```

多层对象或者多层数组，无论几层都会被复制；但是第一层是深拷贝，就是不联动，改变其中一个另一个不受影响。但是第二层及以后的是浅拷贝，只是拷贝的引用地址，改变其中一个另一个联动改动。

`Object.assign()`同理

```js
let obj3 = {
    name: "Gucci",
    age: 13,
    gender: "female",
    hobby: {
        a: 'Chinese',
        b: 'Math',
        c: 'English'
    }
};
let obj4 = Object.assign({}, obj3);
obj4.hobby.a = "Math";
obj3.age = 1000;
console.log(obj3);
/*
{
    "name": "Gucci",
    "age": 1000,
    "gender": "female",
    "hobby": {
        "a": "Math",
        "b": "Math",
        "c": "English"
    }
}
*/
console.log(obj4);
/*
{
    "name": "Gucci",
    "age": 13, // 第一层深拷贝，不联动
    "gender": "female",
    "hobby": {
        "a": "Math", // 第二层浅拷贝，联动改变为Math
        "b": "Math",
        "c": "English"
    }
}
*/
```

## 同步与异步

### 定义

同步：一定要任务做完了， 得到结果了，才能执行下一个任务。

```js
function taskSync = function(){
  return '同步任务的返回值'
}

var result = taskSync() // 那么 result 就是同步任务的结果
otherTask()             // 然后执行下一个任务
```

异步：不等任务执行完，直接执行下一个任务。

```js
function taskAsync = function(){
  var result = setTimeout(function(){
    console.log('异步任务的结果')
  }, 3000)
  return result
}

var result = taskAsync() // result 不是异步任务的结果，而是一个 timer id
otherTask()              // 立即执行其他任务，不等异步任务结束
```

既然异步拿不到返回结果，而是一个timer id，应该用callback拿到异步任务的结果

```js
function taskAsync = function(callback){
  var result = setTimeout(function(){
    callback('异步任务的结果')
  }, 3000)
  return result
}

taskAsync(function callback(result){
  console.log(result) // 三秒钟后，这个 callback 函数会被执行
})
otherTask()              // 立即执行其他任务，不等异步任务结束
```

### 应用场景

现在有三个函数，taskA()、taskB() 和 taskC()，三个任务**互不影响**。

taskA 和 taskC 执行得很快，但是 taskB 执行需要 10 秒钟。

```js
// 同步的写法
function taskB(){
  var response = $.ajax({
    url:"/data.json",
    async: false // 注意这里 async 为 false，表示是同步
  })
  return response // 十秒钟后，返回 response
}

taskA()
taskB()
taskC()
```

taskC 一定要等 taskB 执行完了才能执行，这就是同步。

执行顺序为：

`A -> B -> AJAX 请求 -> C ---------------------------`

现在换成异步：

```js
// 异步的写法
function taskB(){
  var result = $.ajax({
    url:"/data.json",
    async: true // 异步
  })
  return result // 一定要注意，现在的 result 不是上面的 response
}
taskA()
taskB()
taskC()
```

这样写之后，执行顺序就是

` -> B -> C ---------------------------------------
       -> AJAX 请求 --------------------------------`

**就是说 AJAX 请求和任务C 同时执行。**

**但是请注意执行的主体。AJAX 请求是由浏览器的网络请求模块执行的，taskC 是由 JS 引擎执行的。**

**但是如果都是js引擎，异步任务就是要等同步任务做完之后才能做完，因为js是单线程。本质上js仍然是同步的，因为只是将部分时间消耗较大的任务放在了后面，完全的异步应该是可以并行的（交给其他的线程，比如ajax请求交给网络请求模块，只在js引擎里没办法实现完全的异步）**

综上，如果几个任务互相独立，其中一个执行时间较长，那么一般就用异步地方式做这件事。





## 浏览器的任务队列

> 浏览器进程有：标签页进程，Browser进程（交互，界面管理，网络资源管理），第三方插件进程，GPU进程（3D绘制），浏览器渲染进程（浏览器内核，内部是多线程的，每个标签页所拥有得进程，互不影响）
>
> #### 浏览器内核
>
> 浏览器的线程有：（线程之间互斥
>
> 1. js引擎
>    - JS内核，也称JS引擎，负责处理执行javascript脚本
>    - 等待任务队列的任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS引擎在运行JS程序
> 2. GUI界面渲染线程
>    - 负责渲染浏览器界面，包括解析HTML、CSS、构建DOM树、Render树、布局与绘制等
>    - 当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行
> 3. 事件触发线程
>    - 听起来像JS的执行，但是其实归属于浏览器，而不是JS引擎，用来控制事件循环（可以理解，JS引擎自己都忙不过来，需要浏览器另开线程协助）
>    - 当JS引擎执行代码块如setTimeout时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件线程中
>    - 当对应的事件符合触发条件被触发时，该线程会把事件添加到**待处理队列的队尾**，等待JS引擎的处理
>    - 注意：由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）
> 4. 定时器触发线程
>    - `setInterval`与`setTimeout`所在线程
>    - 定时计时器并不是由JS引擎计时的，因为如果JS引擎是单线程的，如果JS引擎处于堵塞状态，那会影响到计时的准确
>    - 当计时完成被触发，事件会被添加到事件队列，等待JS引擎空闲了执行
> 5. http请求线程
>    - 在XMLHttpRequest在连接后新启动的一个线程
>    - 线程如果检测到请求的状态变更，如果设置有回调函数，该线程会把回调函数添加到事件队列，同理，等待JS引擎空闲了执行
>
> #### 浏览器内核中线程之间的关系
>
> https://segmentfault.com/a/1190000013083967
>
> ###### GUI渲染线程与JS引擎线程互斥
>
> 因为JS引擎可以修改DOM树，那么如果JS引擎在执行修改了DOM结构的同时，GUI线程也在渲染页面，那么这样就会导致渲染线程获取的DOM的元素信息可能与JS引擎操作DOM后的结果不一致。为了防止这种现象，GUI线程与JS线程需要设计为互斥关系，当JS引擎执行的时候，GUI线程需要被冻结，但是GUI的渲染会被保存在一个队列当中，等待JS引擎空闲的时候执行渲染。
> 由此也可以推出，如果JS引擎正在进行CPU密集型计算，那么JS引擎将会阻塞，长时间不空闲，导致渲染进程一直不能执行渲染，页面就会看起来卡顿卡顿的，渲染不连贯，所以，要尽量避免JS执行时间过长。
>
> ###### JS引擎线程与事件触发线程、定时触发器线程、异步HTTP请求线程
>
> 事件触发线程、定时触发器线程、异步HTTP请求线程三个线程有一个共同点，那就是使用回调函数的形式，当满足了特定的条件，这些回调函数会被执行。这些回调函数被浏览器内核理解成事件，在浏览器内核中拥有一个事件队列，这三个线程当满足了内部特定的条件，会将这些回调函数添加到事件队列中，等待JS引擎空闲执行。例如异步HTTP请求线程，线程如果检测到请求的状态变更，如果设置有回调函数，回调函数会被添加事件队列中，等待JS引擎空闲了执行。
> 但是，JS引擎对**事件队列（宏任务）**与**JS引擎内的任务（微任务**）执行存在着先后循序，当每执行完一个事件队列的事件，JS引擎会检测内部是否有未执行的任务，如果有，将会**优先执行（微任务）**。
>
> #### webworker
>
> HTML5标准的一部分，允许一段JavaScript程序运行在主线程之外的另外一个线程中。将一些任务分配给后者运行。在主线程运行的同时，Worker（子）线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。
>
> 注意点：
>
> - WebWorker可以向浏览器申请一个子线程，该子线程服务于主线程，完全受主线程控制。
> - JS引擎线程与worker线程间通过特定的方式通信（**postMessage API**，需要通过序列化对象来与线程交互特定的数据）
>
> 所以，如果需要进行一些高耗时的计算时，可以单独开启一个WebWorker线程，这样不管这个WebWorker子线程怎么密集计算、怎么阻塞，都不会影响JS引擎主线程，只需要等计算结束，将结果通过postMessage传输给主线程就可以了。
>
> 另外，还有个东西叫 `SharedWorker`，与WebWorker在概念上所不同。
>
> - WebWorker 只属于某一个页面，不会和其他标签页的Renderer进程共享，WebWorker是属于Renderer进程创建的进程。
> - SharedWorker 是由浏览器单独创建的进程来运行的JS程序，它被所有的Renderer进程所共享，在浏览器中，最多只能存在一个SharedWorker进程。
>
> SharedWorker由进程管理，WebWorker是某一个Renderer进程下的线程。
>
> ###### webworker的一些问题
>
> 1. 同源限制
>
>    解决方法：
>    (1)将动态生成的脚本转换成Blob对象。
>    (2)然后给这个Blob对象创建一个URL。
>    (3)最后将这个创建好的URL作为地址传给Worker的构造函数。
>
> 2. 访问限制
>
> 3. 使用异步
>
> ###### 使用场景
>
> 1. 专用线程进行数学计算，例如处理ajax返回的大批量数据，读取用户上传文件，计算MD5，更改canvas的位图的过滤，分析视频和声频文件等。worker中除了缺失了DOM和BOM操作能力以外，还是拥有非常强大的js逻辑运算处理的能力的，相当于nodejs一个级别的的运行环境
> 2. 高频的用户交互：word的自动纠错
> 3. 数据的预获取，可以新开一个线程专门用来进行数据的预取和缓冲数据，本地web数据库的行写入和更改，长时间持续的运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断，也有利于随时响应主线程的通信。也可以配合XMLHttpRequest和websocket进行不断开的通信，实现守卫进程。
>
> ##### 浏览器的渲染流程
>
> 每个浏览器内核的渲染流程不一样，下面我们主要以`webkit`为主。
> 首先是渲染的前奏：
>
> 1. 浏览器输入url，浏览器主进程接管，开了一个下载线程
> 2. 然后进行HTTP请求（DNS查询、IP寻址等等），等待响应，开始下载响应报文。
> 3. 将下载完的内容转交给Renderer进程管理
> 4. 开始渲染...
>
> 在说渲染之前，需要理解一些概念：
>
> - DOM Tree： 浏览器将HTML解析成树形的数据结构。
> - CSS Rule Tree：浏览器将CSS解析成树形的数据结构。
> - Render Tree：DOM树和CSS规则树合并后生产Render树。
> - layout：有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系，从而去计算出每个节点在屏幕中的位置。
> - painting: 按照算出来的规则，通过显卡，把内容画到屏幕上。
> - reflow（回流）：当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染，内行称这个回退的过程叫 `reflow`。reflow 会从 <html> 这个 root frame 开始递归往下，依次计算所有的结点几何尺寸和位置。reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显 示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。
> - repaint（重绘）：改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。
>
> 注意：`display:none`的节点不会被加入Render Tree，而`visibility: hidden`则会，所以`display:none`会触发`reflow`，`visibility: hidden`会触发`repaint`。
>
> 浏览器内核拿到响应报文之后，渲染大概分为以下步骤
>
> 1. 解析html生产DOM树。
> 2. 解析CSS规则。
> 3. 根据DOM Tree和CSS Tree生成Render Tree。
> 4. 根据Render树进行layout，负责各个元素节点的尺寸、位置计算。
> 5. 绘制Render树(painting)，绘制页面像素信息。
> 6. 浏览器会将各层的信息发送给GPU，GPU会将各层合成（composite），显示在屏幕上。
>
> 详细步骤略去，大概步骤如下，渲染完毕后JS引擎开始执行`load`事件，绘制流程见下图。
>
> ![图片描述](https://segmentfault.com/img/bV23Wc?w=900&h=352)
>
> 由图中可以看出，css在加载过程中不会影响到DOM树的生成，但是会影响到Render树的生成，进而影响到layout，所以一般来说，style的link标签需要尽量放在head里面，因为在解析DOM树的时候是自上而下的，而css样式又是通过异步加载的，这样的话，解析DOM树下的body节点和加载css样式能尽可能的并行，加快Render树的生成的速度，当然，如果css是通过js动态添加进来的，会引起页面的重绘或重新布局。
> 从有html标准以来到目前为止（2017年5月），标准一直是规定style元素不应出现在body元素中。
>
> 前面提到了`load`事件，那么与`DOMContentLoaded`事件有什么分别。
>
> - 当 DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片。 (譬如如果有async加载的脚本就不一定完成)
> - 当 onLoad 事件触发时，页面上所有的DOM，样式表，脚本，图片都已经加载完成了。 （渲染完毕了）
>
> 顺序是：`DOMContentLoaded -> load`



首先js是个单线程的语言，js的异步也只是以单线程调度的方式运行的，其多线程的表现比如html5中的web worker使得浏览器端的js引擎可以并发地执行js代码，从而实现浏览器多线程，这个是浏览器的行为（js引擎），与js语言本身没有关系。

#### 任务队列：

js在执行代码的时候会将同步代码放进执行栈中，但是异步的放在queue中，有一个event loop就回去循环检查执行栈是否为空，为空时去queue中查看是否有需要处理的通知，有的话再拿到执行栈中执行。

> 这样主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务，等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。
>
> 于是，所有任务可以分为两种：一种是同步任务，一种是异步任务。
> **同步任务**是指在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；**异步任务**是指不进入主线程，而进入“任务队列”的任务，只有“任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。

线程与进程的区别妙解：https://www.zhihu.com/question/25532384































